function [Y,Xf,Af] = myNeuralNetworkFunction(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 18-Nov-2019 17:02:58.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = Qx12 matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = Qx1 matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [0;0;0;0;0;0;0;0;0;0;0;0];
x1_step1.gain = [0.666666666666667;0.037037037037037;0.666666666666667;0.666666666666667;0.666666666666667;0.5;1;1;0.666666666666667;0.666666666666667;0.666666666666667;0.285714285714286];
x1_step1.ymin = -1;

% Layer 1
b1 = [-1.8221590408992027754;-1.3454964879997941551;0.85294325772580270595;0.47864709997503529504;0.46732746275966774441;0.52926645809311623214;0.61326920177810462231;0.74592238341864058881;-1.4622527394641942067;1.68462249964767663];
IW1_1 = [0.51993063698089281299 0.28935707151591710806 -0.033639078671704444878 0.58802416385804345822 0.19718318366391313079 0.066845007830097641355 -0.23201755562335571459 -0.49716418949662549709 -0.8685390961109694663 -0.49989849869344515909 -0.1799671525938006944 0.75681045777894340176;0.53715591547622587587 -0.59755164092621348981 0.34752541189160190971 -0.45921526477979052183 0.097421062300971111858 0.49462935256143969465 0.071734493228625295647 0.74514778977894480239 0.50399868579152007353 -0.40535861968907077602 0.046045768622315533247 0.80250310339584263186;-0.43379356097536464487 -0.56786878348255331872 0.54214599913015115717 0.62021607130963196663 0.67249679868192835386 0.63719836662217665957 -0.40719247474138964282 -0.48318454800336096966 0.47886756688634962709 -0.42296821208913282231 -0.085429498754933982929 0.012313484785388914902;0.0035471866206299648705 0.024271649551090183211 0.74216580102175777611 -0.25703735610115419075 -0.30914587653804259659 -0.64996355347593570695 0.25140494740571239785 0.59677165587330049945 0.6641654592842745064 -0.53993779814417597329 -0.6947227971166863858 0.011419486825810256508;-0.20361795583622827044 0.77457773846267341522 0.17696518866608179632 -0.57417226810208010779 0.31269541398048716907 0.10170988547656979739 -0.67993521021143210614 0.035090372366802624615 -0.85944255249166645605 0.48286967723561224908 -0.6434963588881503771 -0.35020016174628704198;0.15215106093138608401 -0.33168576247198156004 -0.52051304252995533872 -0.47187619173530331862 0.30994090540337437822 -0.092068392682477753763 -0.044337193915251316145 0.87687011775127776669 -0.29720601476202829216 -0.089506600081403708824 -0.93332149649574436268 0.65176779617360880437;0.37144242080010897444 0.14761479297920099274 -0.62957448864023002333 0.2104489173451364048 -0.23925557586480566963 -0.90476543326260749911 0.30899070071275819283 -0.78885357505200603967 -0.46469572290503396994 0.05856418056698129565 -0.62135911761022333266 -0.25533813955843670529;0.57819622035753459599 -0.54216417449151899088 -0.59457852466035165939 -0.047903609499887978007 0.24979192709186942567 -0.32316813676901862129 0.69748509144813031213 -0.082375329788196019476 0.6727933469368794217 -0.5507577669484102767 -0.38813033930446994013 -0.73408290942531806422;-0.33712116268707920108 0.4497116767361786227 0.5385156365430285863 -0.25563703811754556749 -0.66406147122688086171 -0.56448938214749488917 0.050569528331407084809 -0.67373981668703653014 -0.07639512430409815813 0.71876825292851165283 -0.065984741194420062915 0.5267794073743805594;0.26629608871664789405 -0.35902853286828201318 -0.37233609930316929892 0.4845233689917277653 -0.64949509687625217591 0.43049351753692244316 -0.60093818237415086436 0.68541013478770351774 0.60873412184485709009 0.19335014818994841757 -0.66138551654646582367 -0.15456655781262937377];

% Layer 2
b2 = 0.37927738867817606394;
LW2_1 = [-0.94416894664767014866 -0.56943989866462318972 -0.7436184977458166756 -0.643389213824949735 1.3228268168599826016 1.1201190841875652282 0.37736388276280652398 -0.92500750257519870345 -0.93602930423645802627 -0.03429574574759125527];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
    X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},1); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    X{1,ts} = X{1,ts}';
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = logsig_apply(repmat(b2,1,Q) + LW2_1*a1);
    
    % Output 1
    Y{1,ts} = a2;
    Y{1,ts} = Y{1,ts}';
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
    Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Positive Transfer Function
function a = logsig_apply(n,~)
a = 1 ./ (1 + exp(-n));
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end
